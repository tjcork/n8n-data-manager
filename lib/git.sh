#!/bin/bash

# Git operations module for n8n-push
# Centralizes all Git-related functionality

# Source common utilities
# shellcheck disable=SC1091  # common.sh lives alongside this module
source "$(dirname "${BASH_SOURCE[0]}")/common.sh"

# Initialize Git repository for backup storage
init_git_repo() {
    local backup_dir="$1"
    
    if [[ -z "$backup_dir" ]]; then
        log "ERROR" "Backup directory not specified for Git initialization"
        return 1
    fi
    
    cd "$backup_dir" || {
        log "ERROR" "Failed to change to backup directory: $backup_dir"
        return 1
    }
    
    if [[ ! -d ".git" ]]; then
        log "INFO" "Initializing Git repository in $backup_dir"
        git init || {
            log "ERROR" "Failed to initialize Git repository"
            return 1
        }
        
        # Create initial commit
        {
            printf '# n8n Backup Repository\n\n'
            printf 'This repository contains automated backups of n8n workflows and credentials.\n'
            printf 'Generated by n8n-push on %s\n' "$(date)"
        } > README.md
        
        git add README.md
        git commit -m "Initial commit - n8n backup repository" || {
            log "ERROR" "Failed to create initial commit"
            return 1
        }
        
        log "SUCCESS" "Git repository initialized successfully"
    else
        log "DEBUG" "Git repository already exists"
    fi
    
    return 0
}

# Commit individual workflow file
commit_individual_workflow() {
    local file_path="$1"
    local workflow_name="$2"
    local git_dir="$3"
    local is_new="$4"  # "true" for new, "false" for updated
    
    if [[ -z "$file_path" || -z "$workflow_name" || -z "$git_dir" ]]; then
        log "ERROR" "Missing required parameters for individual workflow commit"
        return 1
    fi
    
    cd "$git_dir" || {
        log "ERROR" "Failed to change to git directory: $git_dir"
        return 1
    }
    
    # Determine commit prefix
    local prefix="updated"
    if [[ $is_new == true ]]; then
        prefix="new"
    fi
    
    # Stage the specific file
    git add "$file_path" || {
        log "ERROR" "Failed to stage file: $file_path"
        return 1
    }
    
    # Check if there are changes to commit
    if git diff --cached --quiet; then
        log "DEBUG" "No changes to commit for workflow: $workflow_name"
        return 0
    fi
    
    # Commit with simple message format
    local commit_msg="[$prefix] $workflow_name"
    git commit -m "$commit_msg" || {
        log "ERROR" "Failed to commit workflow: $workflow_name"
        return 1
    }
    
    log "SUCCESS" "Committed workflow: $workflow_name"
    return 0
}

commit_deleted_workflow() {
    local file_path="$1"
    local workflow_name="$2"
    local git_dir="$3"

    if [[ -z "$file_path" || -z "$workflow_name" || -z "$git_dir" ]]; then
        log "ERROR" "Missing required parameters for deleted workflow commit"
        return 1
    fi

    cd "$git_dir" || {
        log "ERROR" "Failed to change to git directory: $git_dir"
        return 1
    }

    if ! git add "$file_path" 2>/dev/null; then
        log "ERROR" "Failed to stage workflow deletion: $file_path"
        return 1
    fi

    if git diff --cached --quiet; then
        log "DEBUG" "No deletion changes to commit for workflow: $workflow_name"
        return 0
    fi

    local commit_msg="[deleted] $workflow_name"
    if ! git commit -m "$commit_msg" >/dev/null 2>&1; then
        log "ERROR" "Failed to commit workflow deletion: $workflow_name"
        return 1
    fi

    log "SUCCESS" "Committed workflow deletion: $workflow_name"
    return 0
}

# Commit credentials file
commit_credentials() {
    local git_dir="$1"
    
    if [[ -z "$git_dir" ]]; then
        log "ERROR" "Git directory not specified for credentials commit"
        return 1
    fi
    
    cd "$git_dir" || {
        log "ERROR" "Failed to change to git directory: $git_dir"
        return 1
    }
    
    # Stage credentials file if it exists
    if [[ -f "credentials.json" ]]; then
        git add credentials.json || {
            log "ERROR" "Failed to stage credentials.json"
            return 1
        }
        
        # Check if there are changes to commit
        if ! git diff --cached --quiet; then
            git commit -m "[updated] credentials" || {
                log "ERROR" "Failed to commit credentials"
                return 1
            }
            log "SUCCESS" "Committed credentials"
        else
            log "DEBUG" "No changes to commit for credentials"
        fi
    fi
    
    return 0
}

# Commit all changes at once (bulk commit)
commit_bulk_changes() {
    local git_dir="$1"
    local commit_message="$2"
    
    if [[ -z "$git_dir" ]]; then
        log "ERROR" "Git directory not specified for bulk commit"
        return 1
    fi
    
    if [[ -z "$commit_message" ]]; then
        commit_message="Backup update - $(date '+%Y-%m-%d %H:%M:%S')"
    fi
    
    cd "$git_dir" || {
        log "ERROR" "Failed to change to git directory: $git_dir"
        return 1
    }
    
    # Stage all changes
    git add . || {
        log "ERROR" "Failed to stage changes"
        return 1
    }
    
    # Check if there are changes to commit
    if git diff --cached --quiet; then
        log "INFO" "No changes to commit"
        return 0
    fi
    
    # Commit changes
    git commit -m "$commit_message" || {
        log "ERROR" "Failed to commit changes"
        return 1
    }
    
    log "SUCCESS" "Committed all changes: $commit_message"
    return 0
}

# Create Git tag for backup point
create_backup_tag() {
    local git_dir="$1"
    local tag_name="$2"
    local tag_message="$3"
    
    if [[ -z "$git_dir" || -z "$tag_name" ]]; then
        log "ERROR" "Missing required parameters for Git tag creation"
        return 1
    fi
    
    cd "$git_dir" || {
        log "ERROR" "Failed to change to git directory: $git_dir"
        return 1
    }
    
    if [[ -z "$tag_message" ]]; then
        tag_message="Backup point created on $(date '+%Y-%m-%d %H:%M:%S')"
    fi
    
    # Create annotated tag
    git tag -a "$tag_name" -m "$tag_message" || {
        log "ERROR" "Failed to create Git tag: $tag_name"
        return 1
    }
    
    log "SUCCESS" "Created Git tag: $tag_name"
    return 0
}

# List available backup tags
list_backup_tags() {
    local git_dir="$1"
    
    if [[ -z "$git_dir" ]]; then
        log "ERROR" "Git directory not specified for listing tags"
        return 1
    fi
    
    cd "$git_dir" || {
        log "ERROR" "Failed to change to git directory: $git_dir"
        return 1
    }
    
    log "INFO" "Available backup tags:"
    git tag -l --sort=-version:refname || {
        log "ERROR" "Failed to list Git tags"
        return 1
    }
    
    return 0
}

# Checkout specific backup tag
checkout_backup_tag() {
    local git_dir="$1"
    local tag_name="$2"
    
    if [[ -z "$git_dir" || -z "$tag_name" ]]; then
        log "ERROR" "Missing required parameters for Git tag checkout"
        return 1
    fi
    
    cd "$git_dir" || {
        log "ERROR" "Failed to change to git directory: $git_dir"
        return 1
    }
    
    # Verify tag exists
    if ! git tag -l | grep -q "^$tag_name$"; then
        log "ERROR" "Git tag does not exist: $tag_name"
        return 1
    fi
    
    # Checkout the tag
    git checkout "$tag_name" || {
        log "ERROR" "Failed to checkout Git tag: $tag_name"
        return 1
    }
    
    log "SUCCESS" "Checked out Git tag: $tag_name"
    return 0
}

# Return to main branch
checkout_main_branch() {
    local git_dir="$1"
    local branch_name="${2:-main}"
    
    if [[ -z "$git_dir" ]]; then
        log "ERROR" "Git directory not specified for branch checkout"
        return 1
    fi
    
    cd "$git_dir" || {
        log "ERROR" "Failed to change to git directory: $git_dir"
        return 1
    }
    
    # Checkout main branch
    git checkout "$branch_name" || {
        log "ERROR" "Failed to checkout branch: $branch_name"
        return 1
    }
    
    log "SUCCESS" "Checked out branch: $branch_name"
    return 0
}

# Get Git repository status
get_git_status() {
    local git_dir="$1"
    
    if [[ -z "$git_dir" ]]; then
        log "ERROR" "Git directory not specified for status check"
        return 1
    fi
    
    cd "$git_dir" || {
        log "ERROR" "Failed to change to git directory: $git_dir"
        return 1
    }
    
    log "INFO" "Git repository status:"
    git status --porcelain || {
        log "ERROR" "Failed to get Git status"
        return 1
    }
    
    return 0
}

# Show Git log
show_git_log() {
    local git_dir="$1"
    local limit="${2:-10}"
    
    if [[ -z "$git_dir" ]]; then
        log "ERROR" "Git directory not specified for log display"
        return 1
    fi
    
    cd "$git_dir" || {
        log "ERROR" "Failed to change to git directory: $git_dir"
        return 1
    }
    
    log "INFO" "Recent Git commits (last $limit):"
    git log --oneline -n "$limit" || {
        log "ERROR" "Failed to show Git log"
        return 1
    }
    
    return 0
}

# Verify Git repository integrity
verify_git_repo() {
    local git_dir="$1"
    
    if [[ -z "$git_dir" ]]; then
        log "ERROR" "Git directory not specified for verification"
        return 1
    fi
    
    cd "$git_dir" || {
        log "ERROR" "Failed to change to git directory: $git_dir"
        return 1
    }
    
    # Check if it's a Git repository
    if [[ ! -d ".git" ]]; then
        log "ERROR" "Not a Git repository: $git_dir"
        return 1
    fi
    
    # Verify repository integrity
    git fsck --full --strict || {
        log "ERROR" "Git repository integrity check failed"
        return 1
    }
    
    log "SUCCESS" "Git repository verification passed"
    return 0
}